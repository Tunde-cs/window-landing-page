"""
Django settings for LPageToAdmin project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
import environ
import logging

logging.basicConfig(level=logging.DEBUG)


# ✅ Define BASE_DIR FIRST
BASE_DIR = Path(__file__).resolve().parent.parent

# ✅ Initialize environment variables
env = environ.Env()
env_file = os.path.join(BASE_DIR, ".env")

# ✅ Load .env file if it exists
if os.path.exists(env_file):
    env.read_env(env_file)


# Email Backend Settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True  # ✅ Keep TLS enabled
EMAIL_USE_SSL = False  # ❌ Must be False if TLS is True

EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")  # ✅ Load from .env
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")  # ✅ Load from .env
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "fallback-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False") == "True"  # Ensures DEBUG is a boolean

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "windowgeniusai.herokuapp.com",
    "windowgeniusai-d6c9fb157af2.herokuapp.com",
    "www.windowgeniusai.com",
    "windowgeniusai.com",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",  # Ensure this is here
    "django.contrib.staticfiles",
    "app",
    "django_extensions",
    "chatbot",  # ✅ Register chatbot app
    "corsheaders",  # ✅ Register corsheaders
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware"
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # ✅ Add this for static files
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Default message storage
from django.contrib.messages import constants as messages

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"


ROOT_URLCONF = "LPageToAdmin.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],  # ✅ Use this for project-level templates
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "LPageToAdmin.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# Static files (CSS, JavaScript, Images)
# URL to serve static files
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # For production use
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "/useradmin/"  # Redirect to the Admin Dashboard
LOGOUT_REDIRECT_URL = "/accounts/login/"  # Redirect users to login page after logout

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django.template": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
    },
}

# Add CSFR settings here
CSFR_USE_SESSIONS = True
CSFR_FAILURE_VIEW = "app.views.csrf_failure"  # Optional: custom CSRF failure view

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Add this at the bottom of settings.py
CORS_ALLOW_ALL_ORIGINS = True  # Allow frontend requests
CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1:8000"]  # Add your actual domain if deployed
